--- ./libgcrypt-1.9.2/cipher/rsa.c	2021-08-02 12:38:29.921489018 +0800
+++ ./libgcrypt-1.9.2/cipher/rsa2.c	2021-08-02 12:43:46.316617044 +0800
@@ -1076,16 +1076,7 @@
 {
   /* Remove superfluous leading zeroes from INPUT.  */
   mpi_normalize (input);
-
-  if (!skey->p || !skey->q || !skey->u)
-    {
-      secret_core_std (output, input, skey->d, skey->n);
-    }
-  else
-    {
-      secret_core_crt (output, input, skey->d, mpi_get_nlimbs (skey->n),
-                       skey->p, skey->q, skey->u);
-    }
+  secret_core_std (output, input, skey->d, skey->n);
 }
 
 
@@ -1365,8 +1356,7 @@
   rc = sexp_extract_param (l1, NULL, "a", &data, NULL);
   if (rc)
     goto leave;
-  if (DBG_CIPHER)
-    log_printmpi ("rsa_decrypt data", data);
+	log_printmpi ("rsa_decrypt data", data);
   if (mpi_is_opaque (data))
     {
       rc = GPG_ERR_INV_DATA;
@@ -1392,6 +1382,22 @@
         }
     }
 
+	unsigned char buffer[401] = {0};
+	gcry_err_code_t err;
+	err = gcry_mpi_print(GCRYMPI_FMT_STD, buffer, sizeof(buffer), NULL, data);
+	if (err != 0){
+		printf("error: %d\n", err);
+		return -1;
+	}
+	printf("The ciphertext is: %s\n",buffer);
+
+	err = gcry_mpi_print(GCRYMPI_FMT_HEX, buffer, sizeof(buffer), NULL, data);
+	if (err != 0){
+		printf("error: %d\n", err);
+		return -1;
+	}
+	printf("The ciphertext hex encoded: %s\n", buffer);
+
   /* Better make sure that there are no superfluous leading zeroes in
      the input and it has not been "padded" using multiples of N.
      This mitigates side-channel attacks (CVE-2013-4576).  */
@@ -1401,16 +1407,9 @@
   /* Allocate MPI for the plaintext.  */
   plain = mpi_snew (ctx.nbits);
 
-  /* We use blinding by default to mitigate timing attacks which can
-     be practically mounted over the network as shown by Brumley and
-     Boney in 2003.  */
-  if ((ctx.flags & PUBKEY_FLAG_NO_BLINDING))
-    secret (plain, data, &sk);
-  else
-    secret_blinded (plain, data, &sk, ctx.nbits);
+	secret (plain, data, &sk);
 
-  if (DBG_CIPHER)
-    log_printmpi ("rsa_decrypt  res", plain);
+	log_printmpi ("rsa_decrypt  res", plain);
 
   /* Reverse the encoding and build the s-expression.  */
   switch (ctx.encoding)
